
freeRTOS_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002854  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029ec  080029ec  000039ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a10  08002a10  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a10  08002a10  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a10  08002a10  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a10  08002a10  00003a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a14  08002a14  00003a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002a18  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dc0  2000000c  08002a24  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012dcc  08002a24  00004dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065d1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000116b  00000000  00000000  0000a60d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  0000b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ac  00000000  00000000  0000bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003857  00000000  00000000  0000c234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006f16  00000000  00000000  0000fa8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000909b4  00000000  00000000  000169a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7355  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000186c  00000000  00000000  000a7398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000a8c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080029d4 	.word	0x080029d4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080029d4 	.word	0x080029d4

080001d8 <main>:

static void functionBlueLed(void *pvParameters);
static void functionRedLed(void *pvParameters);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b086      	sub	sp, #24
 80001dc:	af02      	add	r7, sp, #8
	uint32_t *RCC_AHB1ENR = (uint32_t*)(RCC_BASE_ADDR + 0x30);
 80001de:	4b1d      	ldr	r3, [pc, #116]	@ (8000254 <main+0x7c>)
 80001e0:	60fb      	str	r3, [r7, #12]
	*RCC_AHB1ENR |= (1U << 3);
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 0208 	orr.w	r2, r3, #8
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	601a      	str	r2, [r3, #0]

	uint32_t *GPIOD_MODER = (uint32_t*)(GPIOD_BASE_ADDR);
 80001ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000258 <main+0x80>)
 80001f0:	60bb      	str	r3, [r7, #8]
	*GPIOD_MODER |= (0b01 << 30) | (0b01 << 28);
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f043 42a0 	orr.w	r2, r3, #1342177280	@ 0x50000000
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	601a      	str	r2, [r3, #0]

	int8_t status;
	status = xTaskCreate(functionBlueLed,"Blue",configMINIMAL_STACK_SIZE,NULL,configMAX_PRIORITIES-1,NULL);
 80001fe:	2300      	movs	r3, #0
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	2304      	movs	r3, #4
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2300      	movs	r3, #0
 8000208:	2282      	movs	r2, #130	@ 0x82
 800020a:	4914      	ldr	r1, [pc, #80]	@ (800025c <main+0x84>)
 800020c:	4814      	ldr	r0, [pc, #80]	@ (8000260 <main+0x88>)
 800020e:	f000 fc55 	bl	8000abc <xTaskCreate>
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
	if(status == -1)
 8000216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800021e:	d101      	bne.n	8000224 <main+0x4c>
	{
		while(1);
 8000220:	bf00      	nop
 8000222:	e7fd      	b.n	8000220 <main+0x48>
	}
	status = xTaskCreate(functionRedLed,"Red",configMINIMAL_STACK_SIZE,NULL,configMAX_PRIORITIES-2,NULL);
 8000224:	2300      	movs	r3, #0
 8000226:	9301      	str	r3, [sp, #4]
 8000228:	2303      	movs	r3, #3
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	2300      	movs	r3, #0
 800022e:	2282      	movs	r2, #130	@ 0x82
 8000230:	490c      	ldr	r1, [pc, #48]	@ (8000264 <main+0x8c>)
 8000232:	480d      	ldr	r0, [pc, #52]	@ (8000268 <main+0x90>)
 8000234:	f000 fc42 	bl	8000abc <xTaskCreate>
 8000238:	4603      	mov	r3, r0
 800023a:	71fb      	strb	r3, [r7, #7]
	if(status == -1)
 800023c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000244:	d101      	bne.n	800024a <main+0x72>
	{
		while(1);
 8000246:	bf00      	nop
 8000248:	e7fd      	b.n	8000246 <main+0x6e>
	}
	vTaskStartScheduler();
 800024a:	f000 fe0f 	bl	8000e6c <vTaskStartScheduler>
	while(1);
 800024e:	bf00      	nop
 8000250:	e7fd      	b.n	800024e <main+0x76>
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00
 800025c:	080029ec 	.word	0x080029ec
 8000260:	0800026d 	.word	0x0800026d
 8000264:	080029f4 	.word	0x080029f4
 8000268:	08000295 	.word	0x08000295

0800026c <functionBlueLed>:
}


static void functionBlueLed(void *pvParameters)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	uint32_t *GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14);
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <functionBlueLed+0x24>)
 8000276:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		*GPIOD_ODR ^= (1U << 15);
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f483 4200 	eor.w	r2, r3, #32768	@ 0x8000
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	601a      	str	r2, [r3, #0]
		vTaskDelay(500);
 8000284:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000288:	f000 fd64 	bl	8000d54 <vTaskDelay>
		*GPIOD_ODR ^= (1U << 15);
 800028c:	bf00      	nop
 800028e:	e7f3      	b.n	8000278 <functionBlueLed+0xc>
 8000290:	40020c14 	.word	0x40020c14

08000294 <functionRedLed>:
	}
}

static void functionRedLed(void *pvParameters)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	uint32_t *GPIOD_ODR = (uint32_t*)(GPIOD_BASE_ADDR + 0x14);
 800029c:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <functionRedLed+0x24>)
 800029e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		*GPIOD_ODR ^= (1U << 14);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f483 4280 	eor.w	r2, r3, #16384	@ 0x4000
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	601a      	str	r2, [r3, #0]
		vTaskDelay(1000);
 80002ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b0:	f000 fd50 	bl	8000d54 <vTaskDelay>
		*GPIOD_ODR ^= (1U << 14);
 80002b4:	bf00      	nop
 80002b6:	e7f3      	b.n	80002a0 <functionRedLed+0xc>
 80002b8:	40020c14 	.word	0x40020c14

080002bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002c0:	4b06      	ldr	r3, [pc, #24]	@ (80002dc <SystemInit+0x20>)
 80002c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002c6:	4a05      	ldr	r2, [pc, #20]	@ (80002dc <SystemInit+0x20>)
 80002c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00

080002e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000318 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80002e4:	f7ff ffea 	bl	80002bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	@ (800031c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	@ (8000320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	@ (800032c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800030e:	f002 fb2f 	bl	8002970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000312:	f7ff ff61 	bl	80001d8 <main>
  bx  lr    
 8000316:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000324:	08002a18 	.word	0x08002a18
  ldr r2, =_sbss
 8000328:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800032c:	20012dcc 	.word	0x20012dcc

08000330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC_IRQHandler>

08000332 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000332:	b480      	push	{r7}
 8000334:	b083      	sub	sp, #12
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	f103 0208 	add.w	r2, r3, #8
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f04f 32ff 	mov.w	r2, #4294967295
 800034a:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f103 0208 	add.w	r2, r3, #8
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f103 0208 	add.w	r2, r3, #8
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003a2:	d103      	bne.n	80003ac <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	e00c      	b.n	80003c6 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3308      	adds	r3, #8
 80003b0:	60fb      	str	r3, [r7, #12]
 80003b2:	e002      	b.n	80003ba <vListInsert+0x2e>
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	68ba      	ldr	r2, [r7, #8]
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d2f6      	bcs.n	80003b4 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	685a      	ldr	r2, [r3, #4]
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	685b      	ldr	r3, [r3, #4]
 80003d2:	683a      	ldr	r2, [r7, #0]
 80003d4:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	683a      	ldr	r2, [r7, #0]
 80003e0:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	687a      	ldr	r2, [r7, #4]
 80003e6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	1c5a      	adds	r2, r3, #1
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80003fe:	b480      	push	{r7}
 8000400:	b085      	sub	sp, #20
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	691b      	ldr	r3, [r3, #16]
 800040a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	6892      	ldr	r2, [r2, #8]
 8000414:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	689b      	ldr	r3, [r3, #8]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	6852      	ldr	r2, [r2, #4]
 800041e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	429a      	cmp	r2, r3
 8000428:	d103      	bne.n	8000432 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	689a      	ldr	r2, [r3, #8]
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	1e5a      	subs	r2, r3, #1
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	681b      	ldr	r3, [r3, #0]
}
 8000446:	4618      	mov	r0, r3
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800045e:	2301      	movs	r3, #1
 8000460:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8000466:	693b      	ldr	r3, [r7, #16]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d10b      	bne.n	8000484 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 800046c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000470:	f383 8811 	msr	BASEPRI, r3
 8000474:	f3bf 8f6f 	isb	sy
 8000478:	f3bf 8f4f 	dsb	sy
 800047c:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d05d      	beq.n	8000546 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800048e:	2b00      	cmp	r3, #0
 8000490:	d059      	beq.n	8000546 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800049a:	2100      	movs	r1, #0
 800049c:	fba3 2302 	umull	r2, r3, r3, r2
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d000      	beq.n	80004a6 <xQueueGenericReset+0x52>
 80004a4:	2101      	movs	r1, #1
 80004a6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d14c      	bne.n	8000546 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80004ac:	f001 fef2 	bl	8002294 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	681a      	ldr	r2, [r3, #0]
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004b8:	6939      	ldr	r1, [r7, #16]
 80004ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80004bc:	fb01 f303 	mul.w	r3, r1, r3
 80004c0:	441a      	add	r2, r3
 80004c2:	693b      	ldr	r3, [r7, #16]
 80004c4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80004c6:	693b      	ldr	r3, [r7, #16]
 80004c8:	2200      	movs	r2, #0
 80004ca:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	681a      	ldr	r2, [r3, #0]
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80004d4:	693b      	ldr	r3, [r7, #16]
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80004dc:	3b01      	subs	r3, #1
 80004de:	6939      	ldr	r1, [r7, #16]
 80004e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80004e2:	fb01 f303 	mul.w	r3, r1, r3
 80004e6:	441a      	add	r2, r3
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80004ec:	693b      	ldr	r3, [r7, #16]
 80004ee:	22ff      	movs	r2, #255	@ 0xff
 80004f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	22ff      	movs	r2, #255	@ 0xff
 80004f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d114      	bne.n	800052c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	691b      	ldr	r3, [r3, #16]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d01a      	beq.n	8000540 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	3310      	adds	r3, #16
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fffa 	bl	8001508 <xTaskRemoveFromEventList>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d012      	beq.n	8000540 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800051a:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <xQueueGenericReset+0x120>)
 800051c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	f3bf 8f4f 	dsb	sy
 8000526:	f3bf 8f6f 	isb	sy
 800052a:	e009      	b.n	8000540 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	3310      	adds	r3, #16
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fefe 	bl	8000332 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	3324      	adds	r3, #36	@ 0x24
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fef9 	bl	8000332 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000540:	f001 feda 	bl	80022f8 <vPortExitCritical>
 8000544:	e001      	b.n	800054a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10b      	bne.n	8000568 <xQueueGenericReset+0x114>
    __asm volatile
 8000550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000554:	f383 8811 	msr	BASEPRI, r3
 8000558:	f3bf 8f6f 	isb	sy
 800055c:	f3bf 8f4f 	dsb	sy
 8000560:	60bb      	str	r3, [r7, #8]
}
 8000562:	bf00      	nop
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8000568:	697b      	ldr	r3, [r7, #20]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	e000ed04 	.word	0xe000ed04

08000578 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	@ 0x28
 800057c:	af02      	add	r7, sp, #8
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	4613      	mov	r3, r2
 8000584:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8000586:	2300      	movs	r3, #0
 8000588:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d02e      	beq.n	80005ee <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8000590:	2100      	movs	r1, #0
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	fba3 2302 	umull	r2, r3, r3, r2
 800059a:	2b00      	cmp	r3, #0
 800059c:	d000      	beq.n	80005a0 <xQueueGenericCreate+0x28>
 800059e:	2101      	movs	r1, #1
 80005a0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d123      	bne.n	80005ee <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
            /* coverity[misra_c_2012_rule_14_3_violation] */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize ) ) )
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	68ba      	ldr	r2, [r7, #8]
 80005aa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005ae:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80005b2:	d81c      	bhi.n	80005ee <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	68ba      	ldr	r2, [r7, #8]
 80005b8:	fb02 f303 	mul.w	r3, r2, r3
 80005bc:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	3350      	adds	r3, #80	@ 0x50
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 ff46 	bl	8002454 <pvPortMalloc>
 80005c8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d01d      	beq.n	800060c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	3350      	adds	r3, #80	@ 0x50
 80005d8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80005da:	79fa      	ldrb	r2, [r7, #7]
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	4613      	mov	r3, r2
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	68b9      	ldr	r1, [r7, #8]
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f000 f815 	bl	8000616 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80005ec:	e00e      	b.n	800060c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10b      	bne.n	800060c <xQueueGenericCreate+0x94>
    __asm volatile
 80005f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005f8:	f383 8811 	msr	BASEPRI, r3
 80005fc:	f3bf 8f6f 	isb	sy
 8000600:	f3bf 8f4f 	dsb	sy
 8000604:	613b      	str	r3, [r7, #16]
}
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800060c:	69fb      	ldr	r3, [r7, #28]
    }
 800060e:	4618      	mov	r0, r3
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b084      	sub	sp, #16
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
 8000622:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d103      	bne.n	8000632 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	69ba      	ldr	r2, [r7, #24]
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	e002      	b.n	8000638 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000632:	69bb      	ldr	r3, [r7, #24]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000638:	69bb      	ldr	r3, [r7, #24]
 800063a:	68fa      	ldr	r2, [r7, #12]
 800063c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	68ba      	ldr	r2, [r7, #8]
 8000642:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000644:	2101      	movs	r1, #1
 8000646:	69b8      	ldr	r0, [r7, #24]
 8000648:	f7ff ff04 	bl	8000454 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	@ 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000668:	2300      	movs	r3, #0
 800066a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10b      	bne.n	800068e <xQueueReceive+0x32>
    __asm volatile
 8000676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067a:	f383 8811 	msr	BASEPRI, r3
 800067e:	f3bf 8f6f 	isb	sy
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	623b      	str	r3, [r7, #32]
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	e7fd      	b.n	800068a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d103      	bne.n	800069c <xQueueReceive+0x40>
 8000694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <xQueueReceive+0x44>
 800069c:	2301      	movs	r3, #1
 800069e:	e000      	b.n	80006a2 <xQueueReceive+0x46>
 80006a0:	2300      	movs	r3, #0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10b      	bne.n	80006be <xQueueReceive+0x62>
    __asm volatile
 80006a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006aa:	f383 8811 	msr	BASEPRI, r3
 80006ae:	f3bf 8f6f 	isb	sy
 80006b2:	f3bf 8f4f 	dsb	sy
 80006b6:	61fb      	str	r3, [r7, #28]
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	e7fd      	b.n	80006ba <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006be:	f001 f939 	bl	8001934 <xTaskGetSchedulerState>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d102      	bne.n	80006ce <xQueueReceive+0x72>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <xQueueReceive+0x76>
 80006ce:	2301      	movs	r3, #1
 80006d0:	e000      	b.n	80006d4 <xQueueReceive+0x78>
 80006d2:	2300      	movs	r3, #0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10b      	bne.n	80006f0 <xQueueReceive+0x94>
    __asm volatile
 80006d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006dc:	f383 8811 	msr	BASEPRI, r3
 80006e0:	f3bf 8f6f 	isb	sy
 80006e4:	f3bf 8f4f 	dsb	sy
 80006e8:	61bb      	str	r3, [r7, #24]
}
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80006f0:	f001 fdd0 	bl	8002294 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80006f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d01f      	beq.n	8000740 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000700:	68b9      	ldr	r1, [r7, #8]
 8000702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000704:	f000 f88c 	bl	8000820 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8000708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800070a:	1e5a      	subs	r2, r3, #1
 800070c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800070e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000712:	691b      	ldr	r3, [r3, #16]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00f      	beq.n	8000738 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800071a:	3310      	adds	r3, #16
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fef3 	bl	8001508 <xTaskRemoveFromEventList>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d007      	beq.n	8000738 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000728:	4b3c      	ldr	r3, [pc, #240]	@ (800081c <xQueueReceive+0x1c0>)
 800072a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	f3bf 8f4f 	dsb	sy
 8000734:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000738:	f001 fdde 	bl	80022f8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 800073c:	2301      	movs	r3, #1
 800073e:	e069      	b.n	8000814 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d103      	bne.n	800074e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000746:	f001 fdd7 	bl	80022f8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800074a:	2300      	movs	r3, #0
 800074c:	e062      	b.n	8000814 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800074e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000750:	2b00      	cmp	r3, #0
 8000752:	d106      	bne.n	8000762 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4618      	mov	r0, r3
 800075a:	f000 ffaf 	bl	80016bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800075e:	2301      	movs	r3, #1
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000762:	f001 fdc9 	bl	80022f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000766:	f000 fbc5 	bl	8000ef4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800076a:	f001 fd93 	bl	8002294 <vPortEnterCritical>
 800076e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000770:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000774:	b25b      	sxtb	r3, r3
 8000776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800077a:	d103      	bne.n	8000784 <xQueueReceive+0x128>
 800077c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000786:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800078a:	b25b      	sxtb	r3, r3
 800078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000790:	d103      	bne.n	800079a <xQueueReceive+0x13e>
 8000792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000794:	2200      	movs	r2, #0
 8000796:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800079a:	f001 fdad 	bl	80022f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800079e:	1d3a      	adds	r2, r7, #4
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 ff9e 	bl	80016e8 <xTaskCheckForTimeOut>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d123      	bne.n	80007fa <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80007b4:	f000 f8ac 	bl	8000910 <prvIsQueueEmpty>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d017      	beq.n	80007ee <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80007be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007c0:	3324      	adds	r3, #36	@ 0x24
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fe32 	bl	8001430 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80007cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80007ce:	f000 f84d 	bl	800086c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80007d2:	f000 fb9d 	bl	8000f10 <xTaskResumeAll>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d189      	bne.n	80006f0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <xQueueReceive+0x1c0>)
 80007de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	f3bf 8f4f 	dsb	sy
 80007e8:	f3bf 8f6f 	isb	sy
 80007ec:	e780      	b.n	80006f0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80007ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80007f0:	f000 f83c 	bl	800086c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80007f4:	f000 fb8c 	bl	8000f10 <xTaskResumeAll>
 80007f8:	e77a      	b.n	80006f0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80007fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80007fc:	f000 f836 	bl	800086c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000800:	f000 fb86 	bl	8000f10 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000804:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000806:	f000 f883 	bl	8000910 <prvIsQueueEmpty>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	f43f af6f 	beq.w	80006f0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8000812:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8000814:	4618      	mov	r0, r3
 8000816:	3730      	adds	r7, #48	@ 0x30
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	2b00      	cmp	r3, #0
 8000830:	d018      	beq.n	8000864 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	441a      	add	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	429a      	cmp	r2, r3
 800084a:	d303      	bcc.n	8000854 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	68d9      	ldr	r1, [r3, #12]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	461a      	mov	r2, r3
 800085e:	6838      	ldr	r0, [r7, #0]
 8000860:	f002 f8aa 	bl	80029b8 <memcpy>
    }
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000874:	f001 fd0e 	bl	8002294 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800087e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8000880:	e011      	b.n	80008a6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000886:	2b00      	cmp	r3, #0
 8000888:	d012      	beq.n	80008b0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3324      	adds	r3, #36	@ 0x24
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fe3a 	bl	8001508 <xTaskRemoveFromEventList>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800089a:	f000 ff8d 	bl	80017b8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80008a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	dce9      	bgt.n	8000882 <prvUnlockQueue+0x16>
 80008ae:	e000      	b.n	80008b2 <prvUnlockQueue+0x46>
                    break;
 80008b0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	22ff      	movs	r2, #255	@ 0xff
 80008b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80008ba:	f001 fd1d 	bl	80022f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80008be:	f001 fce9 	bl	8002294 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80008c8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008ca:	e011      	b.n	80008f0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d012      	beq.n	80008fa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3310      	adds	r3, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fe15 	bl	8001508 <xTaskRemoveFromEventList>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80008e4:	f000 ff68 	bl	80017b8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dce9      	bgt.n	80008cc <prvUnlockQueue+0x60>
 80008f8:	e000      	b.n	80008fc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80008fa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	22ff      	movs	r2, #255	@ 0xff
 8000900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8000904:	f001 fcf8 	bl	80022f8 <vPortExitCritical>
}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000918:	f001 fcbc 	bl	8002294 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000924:	2301      	movs	r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	e001      	b.n	800092e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800092e:	f001 fce3 	bl	80022f8 <vPortExitCritical>

    return xReturn;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10b      	bne.n	8000968 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8000950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	60fb      	str	r3, [r7, #12]
}
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d024      	beq.n	80009b8 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	e01e      	b.n	80009b2 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000974:	4a18      	ldr	r2, [pc, #96]	@ (80009d8 <vQueueAddToRegistry+0x9c>)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4413      	add	r3, r2
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d105      	bne.n	8000990 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <vQueueAddToRegistry+0x9c>)
 800098a:	4413      	add	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
                    break;
 800098e:	e013      	b.n	80009b8 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8000990:	693b      	ldr	r3, [r7, #16]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10a      	bne.n	80009ac <vQueueAddToRegistry+0x70>
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <vQueueAddToRegistry+0x9c>)
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	4a0c      	ldr	r2, [pc, #48]	@ (80009d8 <vQueueAddToRegistry+0x9c>)
 80009a8:	4413      	add	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	d9dd      	bls.n	8000974 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d005      	beq.n	80009ca <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	683a      	ldr	r2, [r7, #0]
 80009c2:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 80009ca:	bf00      	nop
 80009cc:	371c      	adds	r7, #28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000028 	.word	0x20000028

080009dc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80009ec:	f001 fc52 	bl	8002294 <vPortEnterCritical>
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d103      	bne.n	8000a06 <vQueueWaitForMessageRestricted+0x2a>
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2200      	movs	r2, #0
 8000a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8000a0c:	b25b      	sxtb	r3, r3
 8000a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a12:	d103      	bne.n	8000a1c <vQueueWaitForMessageRestricted+0x40>
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8000a1c:	f001 fc6c 	bl	80022f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d106      	bne.n	8000a36 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3324      	adds	r3, #36	@ 0x24
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fd23 	bl	800147c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000a36:	6978      	ldr	r0, [r7, #20]
 8000a38:	f7ff ff18 	bl	800086c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af04      	add	r7, sp, #16
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fcfc 	bl	8002454 <pvPortMalloc>
 8000a5c:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d013      	beq.n	8000a8c <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000a64:	2058      	movs	r0, #88	@ 0x58
 8000a66:	f001 fcf5 	bl	8002454 <pvPortMalloc>
 8000a6a:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d008      	beq.n	8000a84 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000a72:	2258      	movs	r2, #88	@ 0x58
 8000a74:	2100      	movs	r1, #0
 8000a76:	6978      	ldr	r0, [r7, #20]
 8000a78:	f001 ff72 	bl	8002960 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a82:	e005      	b.n	8000a90 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000a84:	6938      	ldr	r0, [r7, #16]
 8000a86:	f001 fe1d 	bl	80026c4 <vPortFree>
 8000a8a:	e001      	b.n	8000a90 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d00d      	beq.n	8000ab2 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000a96:	2300      	movs	r3, #0
 8000a98:	9303      	str	r3, [sp, #12]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	9302      	str	r3, [sp, #8]
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa0:	9301      	str	r3, [sp, #4]
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
 8000aa4:	9300      	str	r3, [sp, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	68b9      	ldr	r1, [r7, #8]
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 f828 	bl	8000b02 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000ab2:	697b      	ldr	r3, [r7, #20]
    }
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af02      	add	r7, sp, #8
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	9301      	str	r3, [sp, #4]
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	68b9      	ldr	r1, [r7, #8]
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f7ff ffb3 	bl	8000a44 <prvCreateTask>
 8000ade:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d005      	beq.n	8000af2 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000ae6:	6938      	ldr	r0, [r7, #16]
 8000ae8:	f000 f89c 	bl	8000c24 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000aec:	2301      	movs	r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e002      	b.n	8000af8 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8000af8:	697b      	ldr	r3, [r7, #20]
    }
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b088      	sub	sp, #32
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
 8000b0e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8000b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b12:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	461a      	mov	r2, r3
 8000b1a:	21a5      	movs	r1, #165	@ 0xa5
 8000b1c:	f001 ff20 	bl	8002960 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	4413      	add	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	f023 0307 	bic.w	r3, r3, #7
 8000b38:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d00b      	beq.n	8000b5c <prvInitialiseNewTask+0x5a>
    __asm volatile
 8000b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b48:	f383 8811 	msr	BASEPRI, r3
 8000b4c:	f3bf 8f6f 	isb	sy
 8000b50:	f3bf 8f4f 	dsb	sy
 8000b54:	617b      	str	r3, [r7, #20]
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d01e      	beq.n	8000ba0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	e012      	b.n	8000b8e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b68:	68ba      	ldr	r2, [r7, #8]
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	7819      	ldrb	r1, [r3, #0]
 8000b70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	4413      	add	r3, r2
 8000b76:	3334      	adds	r3, #52	@ 0x34
 8000b78:	460a      	mov	r2, r1
 8000b7a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b7c:	68ba      	ldr	r2, [r7, #8]
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	4413      	add	r3, r2
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d006      	beq.n	8000b96 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2b09      	cmp	r3, #9
 8000b92:	d9e9      	bls.n	8000b68 <prvInitialiseNewTask+0x66>
 8000b94:	e000      	b.n	8000b98 <prvInitialiseNewTask+0x96>
            {
                break;
 8000b96:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8000b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d90b      	bls.n	8000bbe <prvInitialiseNewTask+0xbc>
    __asm volatile
 8000ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000baa:	f383 8811 	msr	BASEPRI, r3
 8000bae:	f3bf 8f6f 	isb	sy
 8000bb2:	f3bf 8f4f 	dsb	sy
 8000bb6:	613b      	str	r3, [r7, #16]
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	d901      	bls.n	8000bc8 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bd2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fbca 	bl	8000372 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000be0:	3318      	adds	r3, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fbc5 	bl	8000372 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bf0:	f1c3 0205 	rsb	r2, r3, #5
 8000bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bf6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bfc:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	69b8      	ldr	r0, [r7, #24]
 8000c04:	f001 f9cc 	bl	8001fa0 <pxPortInitialiseStack>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c0c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c18:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000c2c:	f001 fb32 	bl	8002294 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000c30:	4b41      	ldr	r3, [pc, #260]	@ (8000d38 <prvAddNewTaskToReadyList+0x114>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a40      	ldr	r2, [pc, #256]	@ (8000d38 <prvAddNewTaskToReadyList+0x114>)
 8000c38:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8000c3a:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <prvAddNewTaskToReadyList+0x118>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d109      	bne.n	8000c56 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000c42:	4a3e      	ldr	r2, [pc, #248]	@ (8000d3c <prvAddNewTaskToReadyList+0x118>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c48:	4b3b      	ldr	r3, [pc, #236]	@ (8000d38 <prvAddNewTaskToReadyList+0x114>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d110      	bne.n	8000c72 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8000c50:	f000 fdd6 	bl	8001800 <prvInitialiseTaskLists>
 8000c54:	e00d      	b.n	8000c72 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8000c56:	4b3a      	ldr	r3, [pc, #232]	@ (8000d40 <prvAddNewTaskToReadyList+0x11c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d109      	bne.n	8000c72 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c5e:	4b37      	ldr	r3, [pc, #220]	@ (8000d3c <prvAddNewTaskToReadyList+0x118>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d802      	bhi.n	8000c72 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8000c6c:	4a33      	ldr	r2, [pc, #204]	@ (8000d3c <prvAddNewTaskToReadyList+0x118>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8000c72:	4b34      	ldr	r3, [pc, #208]	@ (8000d44 <prvAddNewTaskToReadyList+0x120>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	3301      	adds	r3, #1
 8000c78:	4a32      	ldr	r2, [pc, #200]	@ (8000d44 <prvAddNewTaskToReadyList+0x120>)
 8000c7a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000c7c:	4b31      	ldr	r3, [pc, #196]	@ (8000d44 <prvAddNewTaskToReadyList+0x120>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c88:	2201      	movs	r2, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d48 <prvAddNewTaskToReadyList+0x124>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	4a2d      	ldr	r2, [pc, #180]	@ (8000d48 <prvAddNewTaskToReadyList+0x124>)
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c9a:	492c      	ldr	r1, [pc, #176]	@ (8000d4c <prvAddNewTaskToReadyList+0x128>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	3204      	adds	r2, #4
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1d1a      	adds	r2, r3, #4
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	@ (8000d4c <prvAddNewTaskToReadyList+0x128>)
 8000cda:	441a      	add	r2, r3
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	615a      	str	r2, [r3, #20]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ce4:	4919      	ldr	r1, [pc, #100]	@ (8000d4c <prvAddNewTaskToReadyList+0x128>)
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000cf6:	1c59      	adds	r1, r3, #1
 8000cf8:	4814      	ldr	r0, [pc, #80]	@ (8000d4c <prvAddNewTaskToReadyList+0x128>)
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	4403      	add	r3, r0
 8000d04:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8000d06:	f001 faf7 	bl	80022f8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d40 <prvAddNewTaskToReadyList+0x11c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00e      	beq.n	8000d30 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <prvAddNewTaskToReadyList+0x118>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d207      	bcs.n	8000d30 <prvAddNewTaskToReadyList+0x10c>
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <prvAddNewTaskToReadyList+0x12c>)
 8000d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	f3bf 8f4f 	dsb	sy
 8000d2c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000140 	.word	0x20000140
 8000d3c:	20000068 	.word	0x20000068
 8000d40:	2000014c 	.word	0x2000014c
 8000d44:	2000015c 	.word	0x2000015c
 8000d48:	20000148 	.word	0x20000148
 8000d4c:	2000006c 	.word	0x2000006c
 8000d50:	e000ed04 	.word	0xe000ed04

08000d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d018      	beq.n	8000d98 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8000d66:	f000 f8c5 	bl	8000ef4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8000d6a:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <vTaskDelay+0x64>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d00b      	beq.n	8000d8a <vTaskDelay+0x36>
    __asm volatile
 8000d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d76:	f383 8811 	msr	BASEPRI, r3
 8000d7a:	f3bf 8f6f 	isb	sy
 8000d7e:	f3bf 8f4f 	dsb	sy
 8000d82:	60bb      	str	r3, [r7, #8]
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	e7fd      	b.n	8000d86 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 fdef 	bl	8001970 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8000d92:	f000 f8bd 	bl	8000f10 <xTaskResumeAll>
 8000d96:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d107      	bne.n	8000dae <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8000d9e:	4b07      	ldr	r3, [pc, #28]	@ (8000dbc <vTaskDelay+0x68>)
 8000da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	f3bf 8f4f 	dsb	sy
 8000daa:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000168 	.word	0x20000168
 8000dbc:	e000ed04 	.word	0xe000ed04

08000dc0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 8000dca:	2300      	movs	r3, #0
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	809a      	strh	r2, [r3, #4]
    TaskFunction_t pxIdleTaskFunction = NULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e011      	b.n	8000e06 <prvCreateIdleTasks+0x46>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8000de2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e60 <prvCreateIdleTasks+0xa0>)
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	4413      	add	r3, r2
 8000de8:	7819      	ldrb	r1, [r3, #0]
 8000dea:	1d3a      	adds	r2, r7, #4
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	4413      	add	r3, r2
 8000df0:	460a      	mov	r2, r1
 8000df2:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8000df4:	1d3a      	adds	r2, r7, #4
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <prvCreateIdleTasks+0x4e>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	3301      	adds	r3, #1
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2b08      	cmp	r3, #8
 8000e0a:	d9ea      	bls.n	8000de2 <prvCreateIdleTasks+0x22>
 8000e0c:	e000      	b.n	8000e10 <prvCreateIdleTasks+0x50>
        {
            break;
 8000e0e:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8000e10:	1d3a      	adds	r2, r7, #4
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	4413      	add	r3, r2
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	e015      	b.n	8000e4c <prvCreateIdleTasks+0x8c>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 8000e20:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <prvCreateIdleTasks+0xa4>)
 8000e22:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4a0f      	ldr	r2, [pc, #60]	@ (8000e68 <prvCreateIdleTasks+0xa8>)
 8000e2a:	4413      	add	r3, r2
 8000e2c:	1d39      	adds	r1, r7, #4
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	2300      	movs	r3, #0
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2300      	movs	r3, #0
 8000e36:	2282      	movs	r2, #130	@ 0x82
 8000e38:	6938      	ldr	r0, [r7, #16]
 8000e3a:	f7ff fe3f 	bl	8000abc <xTaskCreate>
 8000e3e:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d106      	bne.n	8000e54 <prvCreateIdleTasks+0x94>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	dde6      	ble.n	8000e20 <prvCreateIdleTasks+0x60>
 8000e52:	e000      	b.n	8000e56 <prvCreateIdleTasks+0x96>
        {
            break;
 8000e54:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8000e56:	69fb      	ldr	r3, [r7, #28]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	080029f8 	.word	0x080029f8
 8000e64:	080017d1 	.word	0x080017d1
 8000e68:	20000164 	.word	0x20000164

08000e6c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8000e72:	f7ff ffa5 	bl	8000dc0 <prvCreateIdleTasks>
 8000e76:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d102      	bne.n	8000e84 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8000e7e:	f000 fdf9 	bl	8001a74 <xTimerCreateTimerTask>
 8000e82:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d116      	bne.n	8000eb8 <vTaskStartScheduler+0x4c>
    __asm volatile
 8000e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000e8e:	f383 8811 	msr	BASEPRI, r3
 8000e92:	f3bf 8f6f 	isb	sy
 8000e96:	f3bf 8f4f 	dsb	sy
 8000e9a:	60bb      	str	r3, [r7, #8]
}
 8000e9c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <vTaskStartScheduler+0x78>)
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <vTaskStartScheduler+0x7c>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <vTaskStartScheduler+0x80>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8000eb2:	f001 f8ff 	bl	80020b4 <xPortStartScheduler>
 8000eb6:	e00f      	b.n	8000ed8 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ebe:	d10b      	bne.n	8000ed8 <vTaskStartScheduler+0x6c>
    __asm volatile
 8000ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec4:	f383 8811 	msr	BASEPRI, r3
 8000ec8:	f3bf 8f6f 	isb	sy
 8000ecc:	f3bf 8f4f 	dsb	sy
 8000ed0:	607b      	str	r3, [r7, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <vTaskStartScheduler+0x84>)
 8000eda:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000160 	.word	0x20000160
 8000ee8:	2000014c 	.word	0x2000014c
 8000eec:	20000144 	.word	0x20000144
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8000ef8:	4b04      	ldr	r3, [pc, #16]	@ (8000f0c <vTaskSuspendAll+0x18>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	3301      	adds	r3, #1
 8000efe:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <vTaskSuspendAll+0x18>)
 8000f00:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000168 	.word	0x20000168

08000f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8000f1e:	f001 f9b9 	bl	8002294 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8000f26:	4b75      	ldr	r3, [pc, #468]	@ (80010fc <xTaskResumeAll+0x1ec>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d10b      	bne.n	8000f46 <xTaskResumeAll+0x36>
    __asm volatile
 8000f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000f32:	f383 8811 	msr	BASEPRI, r3
 8000f36:	f3bf 8f6f 	isb	sy
 8000f3a:	f3bf 8f4f 	dsb	sy
 8000f3e:	603b      	str	r3, [r7, #0]
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	e7fd      	b.n	8000f42 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8000f46:	4b6d      	ldr	r3, [pc, #436]	@ (80010fc <xTaskResumeAll+0x1ec>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80010fc <xTaskResumeAll+0x1ec>)
 8000f4e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8000f50:	4b6a      	ldr	r3, [pc, #424]	@ (80010fc <xTaskResumeAll+0x1ec>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f040 80ca 	bne.w	80010ee <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f5a:	4b69      	ldr	r3, [pc, #420]	@ (8001100 <xTaskResumeAll+0x1f0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80c5 	beq.w	80010ee <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f64:	e08e      	b.n	8001084 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000f66:	4b67      	ldr	r3, [pc, #412]	@ (8001104 <xTaskResumeAll+0x1f4>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	6a12      	ldr	r2, [r2, #32]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	69d2      	ldr	r2, [r2, #28]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	3318      	adds	r3, #24
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d103      	bne.n	8000f9c <xTaskResumeAll+0x8c>
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	6a1a      	ldr	r2, [r3, #32]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	@ 0x28
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	1e5a      	subs	r2, r3, #1
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	68d2      	ldr	r2, [r2, #12]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	6892      	ldr	r2, [r2, #8]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d103      	bne.n	8000fda <xTaskResumeAll+0xca>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	68da      	ldr	r2, [r3, #12]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	68bb      	ldr	r3, [r7, #8]
 8000fe8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fee:	2201      	movs	r2, #1
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	4b45      	ldr	r3, [pc, #276]	@ (8001108 <xTaskResumeAll+0x1f8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	4a43      	ldr	r2, [pc, #268]	@ (8001108 <xTaskResumeAll+0x1f8>)
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001000:	4942      	ldr	r1, [pc, #264]	@ (800110c <xTaskResumeAll+0x1fc>)
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	440b      	add	r3, r1
 800100c:	3304      	adds	r3, #4
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	69fa      	ldr	r2, [r7, #28]
 8001026:	3204      	adds	r2, #4
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	1d1a      	adds	r2, r3, #4
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001036:	4613      	mov	r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4a33      	ldr	r2, [pc, #204]	@ (800110c <xTaskResumeAll+0x1fc>)
 8001040:	441a      	add	r2, r3
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800104a:	4930      	ldr	r1, [pc, #192]	@ (800110c <xTaskResumeAll+0x1fc>)
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	440b      	add	r3, r1
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800105c:	1c59      	adds	r1, r3, #1
 800105e:	482b      	ldr	r0, [pc, #172]	@ (800110c <xTaskResumeAll+0x1fc>)
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4403      	add	r3, r0
 800106a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001070:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <xTaskResumeAll+0x200>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001076:	429a      	cmp	r2, r3
 8001078:	d904      	bls.n	8001084 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800107a:	4a26      	ldr	r2, [pc, #152]	@ (8001114 <xTaskResumeAll+0x204>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	2101      	movs	r1, #1
 8001080:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001084:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <xTaskResumeAll+0x1f4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	f47f af6c 	bne.w	8000f66 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8001094:	f000 fc32 	bl	80018fc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <xTaskResumeAll+0x208>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d012      	beq.n	80010ca <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80010a4:	f000 f84c 	bl	8001140 <xTaskIncrementTick>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d004      	beq.n	80010b8 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80010ae:	4a19      	ldr	r2, [pc, #100]	@ (8001114 <xTaskResumeAll+0x204>)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2101      	movs	r1, #1
 80010b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ef      	bne.n	80010a4 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 80010c4:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <xTaskResumeAll+0x208>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <xTaskResumeAll+0x204>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <xTaskResumeAll+0x200>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <xTaskResumeAll+0x20c>)
 80010e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80010ee:	f001 f903 	bl	80022f8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80010f2:	69bb      	ldr	r3, [r7, #24]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000168 	.word	0x20000168
 8001100:	20000140 	.word	0x20000140
 8001104:	20000100 	.word	0x20000100
 8001108:	20000148 	.word	0x20000148
 800110c:	2000006c 	.word	0x2000006c
 8001110:	20000068 	.word	0x20000068
 8001114:	20000154 	.word	0x20000154
 8001118:	20000150 	.word	0x20000150
 800111c:	e000ed04 	.word	0xe000ed04

08001120 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001126:	4b05      	ldr	r3, [pc, #20]	@ (800113c <xTaskGetTickCount+0x1c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 800112c:	687b      	ldr	r3, [r7, #4]
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000144 	.word	0x20000144

08001140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800114a:	4b7f      	ldr	r3, [pc, #508]	@ (8001348 <xTaskIncrementTick+0x208>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f040 80ef 	bne.w	8001332 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001154:	4b7d      	ldr	r3, [pc, #500]	@ (800134c <xTaskIncrementTick+0x20c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3301      	adds	r3, #1
 800115a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800115c:	4a7b      	ldr	r2, [pc, #492]	@ (800134c <xTaskIncrementTick+0x20c>)
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d121      	bne.n	80011ac <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8001168:	4b79      	ldr	r3, [pc, #484]	@ (8001350 <xTaskIncrementTick+0x210>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <xTaskIncrementTick+0x4a>
    __asm volatile
 8001172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001176:	f383 8811 	msr	BASEPRI, r3
 800117a:	f3bf 8f6f 	isb	sy
 800117e:	f3bf 8f4f 	dsb	sy
 8001182:	607b      	str	r3, [r7, #4]
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	e7fd      	b.n	8001186 <xTaskIncrementTick+0x46>
 800118a:	4b71      	ldr	r3, [pc, #452]	@ (8001350 <xTaskIncrementTick+0x210>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	4b70      	ldr	r3, [pc, #448]	@ (8001354 <xTaskIncrementTick+0x214>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a6e      	ldr	r2, [pc, #440]	@ (8001350 <xTaskIncrementTick+0x210>)
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4a6e      	ldr	r2, [pc, #440]	@ (8001354 <xTaskIncrementTick+0x214>)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	6013      	str	r3, [r2, #0]
 800119e:	4b6e      	ldr	r3, [pc, #440]	@ (8001358 <xTaskIncrementTick+0x218>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a6c      	ldr	r2, [pc, #432]	@ (8001358 <xTaskIncrementTick+0x218>)
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	f000 fba8 	bl	80018fc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80011ac:	4b6b      	ldr	r3, [pc, #428]	@ (800135c <xTaskIncrementTick+0x21c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6a3a      	ldr	r2, [r7, #32]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	f0c0 80a8 	bcc.w	8001308 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011b8:	4b65      	ldr	r3, [pc, #404]	@ (8001350 <xTaskIncrementTick+0x210>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d104      	bne.n	80011cc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80011c2:	4b66      	ldr	r3, [pc, #408]	@ (800135c <xTaskIncrementTick+0x21c>)
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	601a      	str	r2, [r3, #0]
                    break;
 80011ca:	e09d      	b.n	8001308 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80011cc:	4b60      	ldr	r3, [pc, #384]	@ (8001350 <xTaskIncrementTick+0x210>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80011dc:	6a3a      	ldr	r2, [r7, #32]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d203      	bcs.n	80011ec <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80011e4:	4a5d      	ldr	r2, [pc, #372]	@ (800135c <xTaskIncrementTick+0x21c>)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	6013      	str	r3, [r2, #0]
                        break;
 80011ea:	e08d      	b.n	8001308 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	68d2      	ldr	r2, [r2, #12]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	6892      	ldr	r2, [r2, #8]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	3304      	adds	r3, #4
 800120e:	429a      	cmp	r2, r3
 8001210:	d103      	bne.n	800121a <xTaskIncrementTick+0xda>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	2200      	movs	r2, #0
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	1e5a      	subs	r2, r3, #1
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01e      	beq.n	8001270 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	6a12      	ldr	r2, [r2, #32]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	69d2      	ldr	r2, [r2, #28]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	3318      	adds	r3, #24
 8001254:	429a      	cmp	r2, r3
 8001256:	d103      	bne.n	8001260 <xTaskIncrementTick+0x120>
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6a1a      	ldr	r2, [r3, #32]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001274:	2201      	movs	r2, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	4b39      	ldr	r3, [pc, #228]	@ (8001360 <xTaskIncrementTick+0x220>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4313      	orrs	r3, r2
 800127e:	4a38      	ldr	r2, [pc, #224]	@ (8001360 <xTaskIncrementTick+0x220>)
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001286:	4937      	ldr	r1, [pc, #220]	@ (8001364 <xTaskIncrementTick+0x224>)
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	3304      	adds	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	3204      	adds	r2, #4
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	1d1a      	adds	r2, r3, #4
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4a27      	ldr	r2, [pc, #156]	@ (8001364 <xTaskIncrementTick+0x224>)
 80012c6:	441a      	add	r2, r3
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	615a      	str	r2, [r3, #20]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d0:	4924      	ldr	r1, [pc, #144]	@ (8001364 <xTaskIncrementTick+0x224>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80012e2:	1c59      	adds	r1, r3, #1
 80012e4:	481f      	ldr	r0, [pc, #124]	@ (8001364 <xTaskIncrementTick+0x224>)
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4403      	add	r3, r0
 80012f0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <xTaskIncrementTick+0x228>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f67f af5b 	bls.w	80011b8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8001302:	2301      	movs	r3, #1
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001306:	e757      	b.n	80011b8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <xTaskIncrementTick+0x228>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800130e:	4915      	ldr	r1, [pc, #84]	@ (8001364 <xTaskIncrementTick+0x224>)
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d901      	bls.n	8001324 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8001320:	2301      	movs	r3, #1
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <xTaskIncrementTick+0x22c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 800132c:	2301      	movs	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001330:	e004      	b.n	800133c <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <xTaskIncrementTick+0x230>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a0d      	ldr	r2, [pc, #52]	@ (8001370 <xTaskIncrementTick+0x230>)
 800133a:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800133e:	4618      	mov	r0, r3
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000168 	.word	0x20000168
 800134c:	20000144 	.word	0x20000144
 8001350:	200000f8 	.word	0x200000f8
 8001354:	200000fc 	.word	0x200000fc
 8001358:	20000158 	.word	0x20000158
 800135c:	20000160 	.word	0x20000160
 8001360:	20000148 	.word	0x20000148
 8001364:	2000006c 	.word	0x2000006c
 8001368:	20000068 	.word	0x20000068
 800136c:	20000154 	.word	0x20000154
 8001370:	20000150 	.word	0x20000150

08001374 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <vTaskSwitchContext+0xa8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001382:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <vTaskSwitchContext+0xac>)
 8001384:	2201      	movs	r2, #1
 8001386:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8001388:	e041      	b.n	800140e <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <vTaskSwitchContext+0xac>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <vTaskSwitchContext+0xb0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	fab3 f383 	clz	r3, r3
 800139c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800139e:	7afb      	ldrb	r3, [r7, #11]
 80013a0:	f1c3 031f 	rsb	r3, r3, #31
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4920      	ldr	r1, [pc, #128]	@ (8001428 <vTaskSwitchContext+0xb4>)
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	440b      	add	r3, r1
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10b      	bne.n	80013d2 <vTaskSwitchContext+0x5e>
    __asm volatile
 80013ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013be:	f383 8811 	msr	BASEPRI, r3
 80013c2:	f3bf 8f6f 	isb	sy
 80013c6:	f3bf 8f4f 	dsb	sy
 80013ca:	607b      	str	r3, [r7, #4]
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	e7fd      	b.n	80013ce <vTaskSwitchContext+0x5a>
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4a12      	ldr	r2, [pc, #72]	@ (8001428 <vTaskSwitchContext+0xb4>)
 80013de:	4413      	add	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	3308      	adds	r3, #8
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d103      	bne.n	8001400 <vTaskSwitchContext+0x8c>
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	68da      	ldr	r2, [r3, #12]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	4a09      	ldr	r2, [pc, #36]	@ (800142c <vTaskSwitchContext+0xb8>)
 8001408:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <vTaskSwitchContext+0xb8>)
 800140c:	681b      	ldr	r3, [r3, #0]
    }
 800140e:	bf00      	nop
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000168 	.word	0x20000168
 8001420:	20000154 	.word	0x20000154
 8001424:	20000148 	.word	0x20000148
 8001428:	2000006c 	.word	0x2000006c
 800142c:	20000068 	.word	0x20000068

08001430 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10b      	bne.n	8001458 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8001440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001444:	f383 8811 	msr	BASEPRI, r3
 8001448:	f3bf 8f6f 	isb	sy
 800144c:	f3bf 8f4f 	dsb	sy
 8001450:	60fb      	str	r3, [r7, #12]
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <vTaskPlaceOnEventList+0x48>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	3318      	adds	r3, #24
 800145e:	4619      	mov	r1, r3
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7fe ff93 	bl	800038c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001466:	2101      	movs	r1, #1
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f000 fa81 	bl	8001970 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000068 	.word	0x20000068

0800147c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10b      	bne.n	80014a6 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800148e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001492:	f383 8811 	msr	BASEPRI, r3
 8001496:	f3bf 8f6f 	isb	sy
 800149a:	f3bf 8f4f 	dsb	sy
 800149e:	613b      	str	r3, [r7, #16]
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	e7fd      	b.n	80014a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <vTaskPlaceOnEventListRestricted+0x88>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	61da      	str	r2, [r3, #28]
 80014b4:	4b13      	ldr	r3, [pc, #76]	@ (8001504 <vTaskPlaceOnEventListRestricted+0x88>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	6892      	ldr	r2, [r2, #8]
 80014bc:	621a      	str	r2, [r3, #32]
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <vTaskPlaceOnEventListRestricted+0x88>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	3218      	adds	r2, #24
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <vTaskPlaceOnEventListRestricted+0x88>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f103 0218 	add.w	r2, r3, #24
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <vTaskPlaceOnEventListRestricted+0x88>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	68b8      	ldr	r0, [r7, #8]
 80014f8:	f000 fa3a 	bl	8001970 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 80014fc:	bf00      	nop
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000068 	.word	0x20000068

08001508 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001508:	b480      	push	{r7}
 800150a:	b08b      	sub	sp, #44	@ 0x2c
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001518:	6a3b      	ldr	r3, [r7, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10b      	bne.n	8001536 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800151e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001522:	f383 8811 	msr	BASEPRI, r3
 8001526:	f3bf 8f6f 	isb	sy
 800152a:	f3bf 8f4f 	dsb	sy
 800152e:	60fb      	str	r3, [r7, #12]
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	e7fd      	b.n	8001532 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	6a3a      	ldr	r2, [r7, #32]
 8001542:	6a12      	ldr	r2, [r2, #32]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	6a3a      	ldr	r2, [r7, #32]
 800154c:	69d2      	ldr	r2, [r2, #28]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	3318      	adds	r3, #24
 8001558:	429a      	cmp	r2, r3
 800155a:	d103      	bne.n	8001564 <xTaskRemoveFromEventList+0x5c>
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	6a1a      	ldr	r2, [r3, #32]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	2200      	movs	r2, #0
 8001568:	629a      	str	r2, [r3, #40]	@ 0x28
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	1e5a      	subs	r2, r3, #1
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001574:	4b4b      	ldr	r3, [pc, #300]	@ (80016a4 <xTaskRemoveFromEventList+0x19c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d160      	bne.n	800163e <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	6a3a      	ldr	r2, [r7, #32]
 8001588:	68d2      	ldr	r2, [r2, #12]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	6a3a      	ldr	r2, [r7, #32]
 8001592:	6892      	ldr	r2, [r2, #8]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	3304      	adds	r3, #4
 800159e:	429a      	cmp	r2, r3
 80015a0:	d103      	bne.n	80015aa <xTaskRemoveFromEventList+0xa2>
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015be:	2201      	movs	r2, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <xTaskRemoveFromEventList+0x1a0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	4a37      	ldr	r2, [pc, #220]	@ (80016a8 <xTaskRemoveFromEventList+0x1a0>)
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015d0:	4936      	ldr	r1, [pc, #216]	@ (80016ac <xTaskRemoveFromEventList+0x1a4>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	440b      	add	r3, r1
 80015dc:	3304      	adds	r3, #4
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	60da      	str	r2, [r3, #12]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	6a3a      	ldr	r2, [r7, #32]
 80015f6:	3204      	adds	r2, #4
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	1d1a      	adds	r2, r3, #4
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4a27      	ldr	r2, [pc, #156]	@ (80016ac <xTaskRemoveFromEventList+0x1a4>)
 8001610:	441a      	add	r2, r3
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800161a:	4924      	ldr	r1, [pc, #144]	@ (80016ac <xTaskRemoveFromEventList+0x1a4>)
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800162c:	1c59      	adds	r1, r3, #1
 800162e:	481f      	ldr	r0, [pc, #124]	@ (80016ac <xTaskRemoveFromEventList+0x1a4>)
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4403      	add	r3, r0
 800163a:	6019      	str	r1, [r3, #0]
 800163c:	e01b      	b.n	8001676 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <xTaskRemoveFromEventList+0x1a8>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	61da      	str	r2, [r3, #28]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	621a      	str	r2, [r3, #32]
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	6a3a      	ldr	r2, [r7, #32]
 8001658:	3218      	adds	r2, #24
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	f103 0218 	add.w	r2, r3, #24
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <xTaskRemoveFromEventList+0x1a8>)
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
 800166c:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <xTaskRemoveFromEventList+0x1a8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	3301      	adds	r3, #1
 8001672:	4a0f      	ldr	r2, [pc, #60]	@ (80016b0 <xTaskRemoveFromEventList+0x1a8>)
 8001674:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <xTaskRemoveFromEventList+0x1ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001680:	429a      	cmp	r2, r3
 8001682:	d905      	bls.n	8001690 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8001684:	2301      	movs	r3, #1
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8001688:	4b0b      	ldr	r3, [pc, #44]	@ (80016b8 <xTaskRemoveFromEventList+0x1b0>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e001      	b.n	8001694 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001696:	4618      	mov	r0, r3
 8001698:	372c      	adds	r7, #44	@ 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000168 	.word	0x20000168
 80016a8:	20000148 	.word	0x20000148
 80016ac:	2000006c 	.word	0x2000006c
 80016b0:	20000100 	.word	0x20000100
 80016b4:	20000068 	.word	0x20000068
 80016b8:	20000154 	.word	0x20000154

080016bc <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <vTaskInternalSetTimeOutState+0x24>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <vTaskInternalSetTimeOutState+0x28>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	20000158 	.word	0x20000158
 80016e4:	20000144 	.word	0x20000144

080016e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10b      	bne.n	8001710 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80016f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016fc:	f383 8811 	msr	BASEPRI, r3
 8001700:	f3bf 8f6f 	isb	sy
 8001704:	f3bf 8f4f 	dsb	sy
 8001708:	613b      	str	r3, [r7, #16]
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10b      	bne.n	800172e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8001716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800171a:	f383 8811 	msr	BASEPRI, r3
 800171e:	f3bf 8f6f 	isb	sy
 8001722:	f3bf 8f4f 	dsb	sy
 8001726:	60fb      	str	r3, [r7, #12]
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	e7fd      	b.n	800172a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800172e:	f000 fdb1 	bl	8002294 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001732:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <xTaskCheckForTimeOut+0xc8>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174a:	d102      	bne.n	8001752 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	e026      	b.n	80017a0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <xTaskCheckForTimeOut+0xcc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d00a      	beq.n	8001774 <xTaskCheckForTimeOut+0x8c>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	429a      	cmp	r2, r3
 8001766:	d305      	bcc.n	8001774 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e015      	b.n	80017a0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	429a      	cmp	r2, r3
 800177c:	d20b      	bcs.n	8001796 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	1ad2      	subs	r2, r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff96 	bl	80016bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	e004      	b.n	80017a0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800179c:	2301      	movs	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80017a0:	f000 fdaa 	bl	80022f8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80017a4:	69fb      	ldr	r3, [r7, #28]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000144 	.word	0x20000144
 80017b4:	20000158 	.word	0x20000158

080017b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <vTaskMissedYield+0x14>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	20000154 	.word	0x20000154

080017d0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80017d8:	f000 f852 	bl	8001880 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <prvIdleTask+0x28>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d9f9      	bls.n	80017d8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <prvIdleTask+0x2c>)
 80017e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f3bf 8f4f 	dsb	sy
 80017f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80017f4:	e7f0      	b.n	80017d8 <prvIdleTask+0x8>
 80017f6:	bf00      	nop
 80017f8:	2000006c 	.word	0x2000006c
 80017fc:	e000ed04 	.word	0xe000ed04

08001800 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	e00c      	b.n	8001826 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <prvInitialiseTaskLists+0x60>)
 8001818:	4413      	add	r3, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fd89 	bl	8000332 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3301      	adds	r3, #1
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b04      	cmp	r3, #4
 800182a:	d9ef      	bls.n	800180c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800182c:	480d      	ldr	r0, [pc, #52]	@ (8001864 <prvInitialiseTaskLists+0x64>)
 800182e:	f7fe fd80 	bl	8000332 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001832:	480d      	ldr	r0, [pc, #52]	@ (8001868 <prvInitialiseTaskLists+0x68>)
 8001834:	f7fe fd7d 	bl	8000332 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8001838:	480c      	ldr	r0, [pc, #48]	@ (800186c <prvInitialiseTaskLists+0x6c>)
 800183a:	f7fe fd7a 	bl	8000332 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800183e:	480c      	ldr	r0, [pc, #48]	@ (8001870 <prvInitialiseTaskLists+0x70>)
 8001840:	f7fe fd77 	bl	8000332 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001844:	480b      	ldr	r0, [pc, #44]	@ (8001874 <prvInitialiseTaskLists+0x74>)
 8001846:	f7fe fd74 	bl	8000332 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800184a:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <prvInitialiseTaskLists+0x78>)
 800184c:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <prvInitialiseTaskLists+0x64>)
 800184e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001850:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <prvInitialiseTaskLists+0x7c>)
 8001852:	4a05      	ldr	r2, [pc, #20]	@ (8001868 <prvInitialiseTaskLists+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000006c 	.word	0x2000006c
 8001864:	200000d0 	.word	0x200000d0
 8001868:	200000e4 	.word	0x200000e4
 800186c:	20000100 	.word	0x20000100
 8001870:	20000114 	.word	0x20000114
 8001874:	2000012c 	.word	0x2000012c
 8001878:	200000f8 	.word	0x200000f8
 800187c:	200000fc 	.word	0x200000fc

08001880 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001886:	e019      	b.n	80018bc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8001888:	f000 fd04 	bl	8002294 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800188c:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <prvCheckTasksWaitingTermination+0x50>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3304      	adds	r3, #4
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fdb0 	bl	80003fe <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800189e:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <prvCheckTasksWaitingTermination+0x54>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4a0b      	ldr	r2, [pc, #44]	@ (80018d4 <prvCheckTasksWaitingTermination+0x54>)
 80018a6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <prvCheckTasksWaitingTermination+0x58>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <prvCheckTasksWaitingTermination+0x58>)
 80018b0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80018b2:	f000 fd21 	bl	80022f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f810 	bl	80018dc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <prvCheckTasksWaitingTermination+0x58>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1e1      	bne.n	8001888 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000114 	.word	0x20000114
 80018d4:	20000140 	.word	0x20000140
 80018d8:	20000128 	.word	0x20000128

080018dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 feeb 	bl	80026c4 <vPortFree>
            vPortFree( pxTCB );
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fee8 	bl	80026c4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001900:	4b0a      	ldr	r3, [pc, #40]	@ (800192c <prvResetNextTaskUnblockTime+0x30>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d104      	bne.n	8001914 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800190a:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <prvResetNextTaskUnblockTime+0x34>)
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001912:	e005      	b.n	8001920 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <prvResetNextTaskUnblockTime+0x30>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <prvResetNextTaskUnblockTime+0x34>)
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	200000f8 	.word	0x200000f8
 8001930:	20000160 	.word	0x20000160

08001934 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <xTaskGetSchedulerState+0x34>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001942:	2301      	movs	r3, #1
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	e008      	b.n	800195a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <xTaskGetSchedulerState+0x38>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8001950:	2302      	movs	r3, #2
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	e001      	b.n	800195a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8001956:	2300      	movs	r3, #0
 8001958:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800195a:	687b      	ldr	r3, [r7, #4]
    }
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	2000014c 	.word	0x2000014c
 800196c:	20000168 	.word	0x20000168

08001970 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800197a:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <prvAddCurrentTaskToDelayedList+0xe8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8001980:	4b36      	ldr	r3, [pc, #216]	@ (8001a5c <prvAddCurrentTaskToDelayedList+0xec>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8001986:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800198c:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3304      	adds	r3, #4
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fd33 	bl	80003fe <uxListRemove>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10b      	bne.n	80019b6 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800199e:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a4:	2201      	movs	r2, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001a68 <prvAddCurrentTaskToDelayedList+0xf8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4013      	ands	r3, r2
 80019b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001a68 <prvAddCurrentTaskToDelayedList+0xf8>)
 80019b4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d124      	bne.n	8001a08 <prvAddCurrentTaskToDelayedList+0x98>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d021      	beq.n	8001a08 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80019c4:	4b29      	ldr	r3, [pc, #164]	@ (8001a6c <prvAddCurrentTaskToDelayedList+0xfc>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	6892      	ldr	r2, [r2, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	3204      	adds	r2, #4
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	1d1a      	adds	r2, r3, #4
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a6c <prvAddCurrentTaskToDelayedList+0xfc>)
 80019f8:	615a      	str	r2, [r3, #20]
 80019fa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a6c <prvAddCurrentTaskToDelayedList+0xfc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3301      	adds	r3, #1
 8001a00:	4a1a      	ldr	r2, [pc, #104]	@ (8001a6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8001a06:	e022      	b.n	8001a4e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001a10:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001a20:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3304      	adds	r3, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	6978      	ldr	r0, [r7, #20]
 8001a2a:	f7fe fcaf 	bl	800038c <vListInsert>
}
 8001a2e:	e00e      	b.n	8001a4e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <prvAddCurrentTaskToDelayedList+0xf4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	3304      	adds	r3, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	69b8      	ldr	r0, [r7, #24]
 8001a3a:	f7fe fca7 	bl	800038c <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <prvAddCurrentTaskToDelayedList+0x100>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d202      	bcs.n	8001a4e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8001a48:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <prvAddCurrentTaskToDelayedList+0x100>)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6013      	str	r3, [r2, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000144 	.word	0x20000144
 8001a5c:	200000f8 	.word	0x200000f8
 8001a60:	200000fc 	.word	0x200000fc
 8001a64:	20000068 	.word	0x20000068
 8001a68:	20000148 	.word	0x20000148
 8001a6c:	2000012c 	.word	0x2000012c
 8001a70:	20000160 	.word	0x20000160

08001a74 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8001a7e:	f000 fa59 	bl	8001f34 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <xTimerCreateTimerTask+0x58>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( &prvTimerTask,
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <xTimerCreateTimerTask+0x5c>)
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a98:	490e      	ldr	r1, [pc, #56]	@ (8001ad4 <xTimerCreateTimerTask+0x60>)
 8001a9a:	480f      	ldr	r0, [pc, #60]	@ (8001ad8 <xTimerCreateTimerTask+0x64>)
 8001a9c:	f7ff f80e 	bl	8000abc <xTaskCreate>
 8001aa0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10b      	bne.n	8001ac0 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8001aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aac:	f383 8811 	msr	BASEPRI, r3
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	f3bf 8f4f 	dsb	sy
 8001ab8:	603b      	str	r3, [r7, #0]
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8001ac0:	687b      	ldr	r3, [r7, #4]
    }
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000019c 	.word	0x2000019c
 8001ad0:	200001a0 	.word	0x200001a0
 8001ad4:	08002a00 	.word	0x08002a00
 8001ad8:	08001b81 	.word	0x08001b81

08001adc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001ae8:	e008      	b.n	8001afc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	68f8      	ldr	r0, [r7, #12]
 8001afa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	18d1      	adds	r1, r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f8df 	bl	8001ccc <prvInsertTimerInActiveList>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1ea      	bne.n	8001aea <prvReloadTimer+0xe>
        }
    }
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <prvProcessExpiredTimer+0x5c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3304      	adds	r3, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fc60 	bl	80003fe <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f7ff ffc3 	bl	8001adc <prvReloadTimer>
 8001b56:	e008      	b.n	8001b6a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b5e:	f023 0301 	bic.w	r3, r3, #1
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	4798      	blx	r3
    }
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000194 	.word	0x20000194

08001b80 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f000 f859 	bl	8001c44 <prvGetNextExpireTime>
 8001b92:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4619      	mov	r1, r3
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f805 	bl	8001ba8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001b9e:	f000 f8d7 	bl	8001d50 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001ba2:	bf00      	nop
 8001ba4:	e7f0      	b.n	8001b88 <prvTimerTask+0x8>
	...

08001ba8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001bb2:	f7ff f99f 	bl	8000ef4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f866 	bl	8001c8c <prvSampleTimeNow>
 8001bc0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d130      	bne.n	8001c2a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10a      	bne.n	8001be4 <prvProcessTimerOrBlockTask+0x3c>
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d806      	bhi.n	8001be4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001bd6:	f7ff f99b 	bl	8000f10 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001bda:	68f9      	ldr	r1, [r7, #12]
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff9f 	bl	8001b20 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001be2:	e024      	b.n	8001c2e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d008      	beq.n	8001bfc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001bea:	4b13      	ldr	r3, [pc, #76]	@ (8001c38 <prvProcessTimerOrBlockTask+0x90>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <prvProcessTimerOrBlockTask+0x50>
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <prvProcessTimerOrBlockTask+0x52>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <prvProcessTimerOrBlockTask+0x94>)
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe fee7 	bl	80009dc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001c0e:	f7ff f97f 	bl	8000f10 <xTaskResumeAll>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10a      	bne.n	8001c2e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8001c18:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <prvProcessTimerOrBlockTask+0x98>)
 8001c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	f3bf 8f6f 	isb	sy
    }
 8001c28:	e001      	b.n	8001c2e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001c2a:	f7ff f971 	bl	8000f10 <xTaskResumeAll>
    }
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000198 	.word	0x20000198
 8001c3c:	2000019c 	.word	0x2000019c
 8001c40:	e000ed04 	.word	0xe000ed04

08001c44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <prvGetNextExpireTime+0x44>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <prvGetNextExpireTime+0x16>
 8001c56:	2201      	movs	r2, #1
 8001c58:	e000      	b.n	8001c5c <prvGetNextExpireTime+0x18>
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d105      	bne.n	8001c74 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <prvGetNextExpireTime+0x44>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	e001      	b.n	8001c78 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001c78:	68fb      	ldr	r3, [r7, #12]
    }
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000194 	.word	0x20000194

08001c8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8001c94:	f7ff fa44 	bl	8001120 <xTaskGetTickCount>
 8001c98:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <prvSampleTimeNow+0x3c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d205      	bcs.n	8001cb0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001ca4:	f000 f920 	bl	8001ee8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e002      	b.n	8001cb6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <prvSampleTimeNow+0x3c>)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200001a4 	.word	0x200001a4

08001ccc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d812      	bhi.n	8001d18 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d302      	bcc.n	8001d06 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001d00:	2301      	movs	r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e01b      	b.n	8001d3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <prvInsertTimerInActiveList+0x7c>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4610      	mov	r0, r2
 8001d12:	f7fe fb3b 	bl	800038c <vListInsert>
 8001d16:	e012      	b.n	8001d3e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d206      	bcs.n	8001d2e <prvInsertTimerInActiveList+0x62>
 8001d20:	68ba      	ldr	r2, [r7, #8]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d302      	bcc.n	8001d2e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	e007      	b.n	8001d3e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001d2e:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <prvInsertTimerInActiveList+0x80>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f7fe fb27 	bl	800038c <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001d3e:	697b      	ldr	r3, [r7, #20]
    }
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000198 	.word	0x20000198
 8001d4c:	20000194 	.word	0x20000194

08001d50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8001d62:	e0ad      	b.n	8001ec0 <prvProcessReceivedCommands+0x170>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f2c0 80aa 	blt.w	8001ec0 <prvProcessReceivedCommands+0x170>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	61fb      	str	r3, [r7, #28]

                if( pxTimer != NULL )
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80a4 	beq.w	8001ec0 <prvProcessReceivedCommands+0x170>
                {
                    if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <prvProcessReceivedCommands+0x3a>
                    {
                        /* The timer is in a list, remove it. */
                        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb3a 	bl	80003fe <uxListRemove>
                     *  it must be present in the function call.  prvSampleTimeNow() must be
                     *  called after the message is received from xTimerQueue so there is no
                     *  possibility of a higher priority task adding a message to the message
                     *  queue with a time that is ahead of the timer daemon task (because it
                     *  pre-empted the timer daemon task after the xTimeNow value was set). */
                    xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff7d 	bl	8001c8c <prvSampleTimeNow>
 8001d92:	61b8      	str	r0, [r7, #24]

                    switch( xMessage.xMessageID )
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	f200 808e 	bhi.w	8001eba <prvProcessReceivedCommands+0x16a>
 8001d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001da4 <prvProcessReceivedCommands+0x54>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001dc9 	.word	0x08001dc9
 8001da8:	08001dc9 	.word	0x08001dc9
 8001dac:	08001e31 	.word	0x08001e31
 8001db0:	08001e45 	.word	0x08001e45
 8001db4:	08001e91 	.word	0x08001e91
 8001db8:	08001dc9 	.word	0x08001dc9
 8001dbc:	08001dc9 	.word	0x08001dc9
 8001dc0:	08001e31 	.word	0x08001e31
 8001dc4:	08001e45 	.word	0x08001e45
                        case tmrCOMMAND_START:
                        case tmrCOMMAND_START_FROM_ISR:
                        case tmrCOMMAND_RESET:
                        case tmrCOMMAND_RESET_FROM_ISR:
                            /* Start or restart a timer. */
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                            if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	18d1      	adds	r1, r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	69f8      	ldr	r0, [r7, #28]
 8001de8:	f7ff ff70 	bl	8001ccc <prvInsertTimerInActiveList>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d065      	beq.n	8001ebe <prvProcessReceivedCommands+0x16e>
                            {
                                /* The timer expired before it was added to the active
                                 * timer list.  Process it now. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <prvProcessReceivedCommands+0xc4>
                                {
                                    prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	4413      	add	r3, r2
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	69f8      	ldr	r0, [r7, #28]
 8001e0e:	f7ff fe65 	bl	8001adc <prvReloadTimer>
 8001e12:	e008      	b.n	8001e26 <prvProcessReceivedCommands+0xd6>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                                }

                                /* Call the timer callback. */
                                traceTIMER_EXPIRED( pxTimer );
                                pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	69f8      	ldr	r0, [r7, #28]
 8001e2c:	4798      	blx	r3
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            break;
 8001e2e:	e046      	b.n	8001ebe <prvProcessReceivedCommands+0x16e>

                        case tmrCOMMAND_STOP:
                        case tmrCOMMAND_STOP_FROM_ISR:
                            /* The timer has already been removed from the active list. */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 8001e42:	e03d      	b.n	8001ec0 <prvProcessReceivedCommands+0x170>

                        case tmrCOMMAND_CHANGE_PERIOD:
                        case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	619a      	str	r2, [r3, #24]
                            configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <prvProcessReceivedCommands+0x12c>
    __asm volatile
 8001e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e68:	f383 8811 	msr	BASEPRI, r3
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	617b      	str	r3, [r7, #20]
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <prvProcessReceivedCommands+0x128>
                             * be longer or shorter than the old one.  The command time is
                             * therefore set to the current time, and as the period cannot
                             * be zero the next expiry time can only be in the future,
                             * meaning (unlike for the xTimerStart() case above) there is
                             * no fail case that needs to be handled here. */
                            ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	699a      	ldr	r2, [r3, #24]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	18d1      	adds	r1, r2, r3
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	69f8      	ldr	r0, [r7, #28]
 8001e8a:	f7ff ff1f 	bl	8001ccc <prvInsertTimerInActiveList>
                            break;
 8001e8e:	e017      	b.n	8001ec0 <prvProcessReceivedCommands+0x170>
                            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <prvProcessReceivedCommands+0x156>
                                {
                                    vPortFree( pxTimer );
 8001e9e:	69f8      	ldr	r0, [r7, #28]
 8001ea0:	f000 fc10 	bl	80026c4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                            break;
 8001ea4:	e00c      	b.n	8001ec0 <prvProcessReceivedCommands+0x170>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 8001eb8:	e002      	b.n	8001ec0 <prvProcessReceivedCommands+0x170>

                        default:
                            /* Don't expect to get here. */
                            break;
 8001eba:	bf00      	nop
 8001ebc:	e000      	b.n	8001ec0 <prvProcessReceivedCommands+0x170>
                            break;
 8001ebe:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <prvProcessReceivedCommands+0x194>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f107 0108 	add.w	r1, r7, #8
 8001ec8:	2200      	movs	r2, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fbc6 	bl	800065c <xQueueReceive>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f47f af46 	bne.w	8001d64 <prvProcessReceivedCommands+0x14>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
    }
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000019c 	.word	0x2000019c

08001ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001eee:	e009      	b.n	8001f04 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <prvSwitchTimerLists+0x44>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001efa:	f04f 31ff 	mov.w	r1, #4294967295
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f7ff fe0e 	bl	8001b20 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001f04:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <prvSwitchTimerLists+0x44>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	@ (8001f2c <prvSwitchTimerLists+0x44>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001f14:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <prvSwitchTimerLists+0x48>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <prvSwitchTimerLists+0x44>)
 8001f1a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <prvSwitchTimerLists+0x48>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6013      	str	r3, [r2, #0]
    }
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000194 	.word	0x20000194
 8001f30:	20000198 	.word	0x20000198

08001f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001f38:	f000 f9ac 	bl	8002294 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001f3c:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <prvCheckForValidListAndQueue+0x54>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d11d      	bne.n	8001f80 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001f44:	4811      	ldr	r0, [pc, #68]	@ (8001f8c <prvCheckForValidListAndQueue+0x58>)
 8001f46:	f7fe f9f4 	bl	8000332 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001f4a:	4811      	ldr	r0, [pc, #68]	@ (8001f90 <prvCheckForValidListAndQueue+0x5c>)
 8001f4c:	f7fe f9f1 	bl	8000332 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001f50:	4b10      	ldr	r3, [pc, #64]	@ (8001f94 <prvCheckForValidListAndQueue+0x60>)
 8001f52:	4a0e      	ldr	r2, [pc, #56]	@ (8001f8c <prvCheckForValidListAndQueue+0x58>)
 8001f54:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001f56:	4b10      	ldr	r3, [pc, #64]	@ (8001f98 <prvCheckForValidListAndQueue+0x64>)
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <prvCheckForValidListAndQueue+0x5c>)
 8001f5a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	210c      	movs	r1, #12
 8001f60:	200a      	movs	r0, #10
 8001f62:	f7fe fb09 	bl	8000578 <xQueueGenericCreate>
 8001f66:	4603      	mov	r3, r0
 8001f68:	4a07      	ldr	r2, [pc, #28]	@ (8001f88 <prvCheckForValidListAndQueue+0x54>)
 8001f6a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <prvCheckForValidListAndQueue+0x54>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001f74:	4b04      	ldr	r3, [pc, #16]	@ (8001f88 <prvCheckForValidListAndQueue+0x54>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4908      	ldr	r1, [pc, #32]	@ (8001f9c <prvCheckForValidListAndQueue+0x68>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fcde 	bl	800093c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001f80:	f000 f9ba 	bl	80022f8 <vPortExitCritical>
    }
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	2000019c 	.word	0x2000019c
 8001f8c:	2000016c 	.word	0x2000016c
 8001f90:	20000180 	.word	0x20000180
 8001f94:	20000194 	.word	0x20000194
 8001f98:	20000198 	.word	0x20000198
 8001f9c:	08002a08 	.word	0x08002a08

08001fa0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fb8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3b04      	subs	r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f023 0201 	bic.w	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3b04      	subs	r3, #4
 8001fce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002004 <pxPortInitialiseStack+0x64>)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	3b14      	subs	r3, #20
 8001fda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3b04      	subs	r3, #4
 8001fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f06f 0202 	mvn.w	r2, #2
 8001fee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3b20      	subs	r3, #32
 8001ff4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	08002009 	.word	0x08002009

08002008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002012:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <prvTaskExitError+0x58>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201a:	d00b      	beq.n	8002034 <prvTaskExitError+0x2c>
    __asm volatile
 800201c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002020:	f383 8811 	msr	BASEPRI, r3
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	60fb      	str	r3, [r7, #12]
}
 800202e:	bf00      	nop
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <prvTaskExitError+0x28>
    __asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	60bb      	str	r3, [r7, #8]
}
 8002046:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002048:	bf00      	nop
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0fc      	beq.n	800204a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002050:	bf00      	nop
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000008 	.word	0x20000008

08002064 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <SVC_Handler+0x1c>)
 8002066:	6819      	ldr	r1, [r3, #0]
 8002068:	6808      	ldr	r0, [r1, #0]
 800206a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800206e:	f380 8809 	msr	PSP, r0
 8002072:	f3bf 8f6f 	isb	sy
 8002076:	f04f 0000 	mov.w	r0, #0
 800207a:	f380 8811 	msr	BASEPRI, r0
 800207e:	4770      	bx	lr
 8002080:	20000068 	.word	0x20000068
        "   msr basepri, r0                 \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop

08002088 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002088:	4808      	ldr	r0, [pc, #32]	@ (80020ac <prvPortStartFirstTask+0x24>)
 800208a:	6800      	ldr	r0, [r0, #0]
 800208c:	6800      	ldr	r0, [r0, #0]
 800208e:	f380 8808 	msr	MSP, r0
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f380 8814 	msr	CONTROL, r0
 800209a:	b662      	cpsie	i
 800209c:	b661      	cpsie	f
 800209e:	f3bf 8f4f 	dsb	sy
 80020a2:	f3bf 8f6f 	isb	sy
 80020a6:	df00      	svc	0
 80020a8:	bf00      	nop
 80020aa:	0000      	.short	0x0000
 80020ac:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop

080020b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08c      	sub	sp, #48	@ 0x30
 80020b8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80020ba:	4b69      	ldr	r3, [pc, #420]	@ (8002260 <xPortStartScheduler+0x1ac>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a69      	ldr	r2, [pc, #420]	@ (8002264 <xPortStartScheduler+0x1b0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d10b      	bne.n	80020dc <xPortStartScheduler+0x28>
    __asm volatile
 80020c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020c8:	f383 8811 	msr	BASEPRI, r3
 80020cc:	f3bf 8f6f 	isb	sy
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80020dc:	4b60      	ldr	r3, [pc, #384]	@ (8002260 <xPortStartScheduler+0x1ac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a61      	ldr	r2, [pc, #388]	@ (8002268 <xPortStartScheduler+0x1b4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d10b      	bne.n	80020fe <xPortStartScheduler+0x4a>
    __asm volatile
 80020e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	623b      	str	r3, [r7, #32]
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	e7fd      	b.n	80020fa <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80020fe:	4b5b      	ldr	r3, [pc, #364]	@ (800226c <xPortStartScheduler+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.freertos.org/Why-FreeRTOS/FAQs.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002106:	332c      	adds	r3, #44	@ 0x2c
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a59      	ldr	r2, [pc, #356]	@ (8002270 <xPortStartScheduler+0x1bc>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00b      	beq.n	8002128 <xPortStartScheduler+0x74>
    __asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	61fb      	str	r3, [r7, #28]
}
 8002122:	bf00      	nop
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212a:	3338      	adds	r3, #56	@ 0x38
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a51      	ldr	r2, [pc, #324]	@ (8002274 <xPortStartScheduler+0x1c0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00b      	beq.n	800214c <xPortStartScheduler+0x98>
    __asm volatile
 8002134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	61bb      	str	r3, [r7, #24]
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002150:	4b49      	ldr	r3, [pc, #292]	@ (8002278 <xPortStartScheduler+0x1c4>)
 8002152:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800215c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215e:	22ff      	movs	r2, #255	@ 0xff
 8002160:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b41      	ldr	r3, [pc, #260]	@ (800227c <xPortStartScheduler+0x1c8>)
 8002176:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002178:	4b40      	ldr	r3, [pc, #256]	@ (800227c <xPortStartScheduler+0x1c8>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10b      	bne.n	8002198 <xPortStartScheduler+0xe4>
    __asm volatile
 8002180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002184:	f383 8811 	msr	BASEPRI, r3
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	f3bf 8f4f 	dsb	sy
 8002190:	617b      	str	r3, [r7, #20]
}
 8002192:	bf00      	nop
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d013      	beq.n	80021ce <xPortStartScheduler+0x11a>
    __asm volatile
 80021a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
 80021b2:	f3bf 8f4f 	dsb	sy
 80021b6:	613b      	str	r3, [r7, #16]
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	e7fd      	b.n	80021ba <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021d6:	2b80      	cmp	r3, #128	@ 0x80
 80021d8:	d0f1      	beq.n	80021be <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d103      	bne.n	80021e8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80021e0:	4b27      	ldr	r3, [pc, #156]	@ (8002280 <xPortStartScheduler+0x1cc>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	e004      	b.n	80021f2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	4a24      	ldr	r2, [pc, #144]	@ (8002280 <xPortStartScheduler+0x1cc>)
 80021f0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80021f2:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <xPortStartScheduler+0x1cc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	4a21      	ldr	r2, [pc, #132]	@ (8002280 <xPortStartScheduler+0x1cc>)
 80021fa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80021fc:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <xPortStartScheduler+0x1cc>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002204:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <xPortStartScheduler+0x1cc>)
 8002206:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002210:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <xPortStartScheduler+0x1d0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1b      	ldr	r2, [pc, #108]	@ (8002284 <xPortStartScheduler+0x1d0>)
 8002216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800221a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <xPortStartScheduler+0x1d0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <xPortStartScheduler+0x1d0>)
 8002222:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002226:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <xPortStartScheduler+0x1d4>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800222e:	f000 f8e1 	bl	80023f4 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002232:	4b16      	ldr	r3, [pc, #88]	@ (800228c <xPortStartScheduler+0x1d8>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002238:	f000 f900 	bl	800243c <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800223c:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <xPortStartScheduler+0x1dc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a13      	ldr	r2, [pc, #76]	@ (8002290 <xPortStartScheduler+0x1dc>)
 8002242:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8002246:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002248:	f7ff ff1e 	bl	8002088 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800224c:	f7ff f892 	bl	8001374 <vTaskSwitchContext>
    prvTaskExitError();
 8002250:	f7ff feda 	bl	8002008 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3730      	adds	r7, #48	@ 0x30
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00
 8002264:	410fc271 	.word	0x410fc271
 8002268:	410fc270 	.word	0x410fc270
 800226c:	e000ed08 	.word	0xe000ed08
 8002270:	08002065 	.word	0x08002065
 8002274:	0800234d 	.word	0x0800234d
 8002278:	e000e400 	.word	0xe000e400
 800227c:	200001a8 	.word	0x200001a8
 8002280:	200001ac 	.word	0x200001ac
 8002284:	e000ed20 	.word	0xe000ed20
 8002288:	e000ed1c 	.word	0xe000ed1c
 800228c:	20000008 	.word	0x20000008
 8002290:	e000ef34 	.word	0xe000ef34

08002294 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
    __asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	607b      	str	r3, [r7, #4]
}
 80022ac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <vPortEnterCritical+0x5c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3301      	adds	r3, #1
 80022b4:	4a0e      	ldr	r2, [pc, #56]	@ (80022f0 <vPortEnterCritical+0x5c>)
 80022b6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80022b8:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <vPortEnterCritical+0x5c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d110      	bne.n	80022e2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <vPortEnterCritical+0x60>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <vPortEnterCritical+0x4e>
    __asm volatile
 80022ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	603b      	str	r3, [r7, #0]
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	e7fd      	b.n	80022de <vPortEnterCritical+0x4a>
    }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	20000008 	.word	0x20000008
 80022f4:	e000ed04 	.word	0xe000ed04

080022f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80022fe:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <vPortExitCritical+0x50>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <vPortExitCritical+0x26>
    __asm volatile
 8002306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800230a:	f383 8811 	msr	BASEPRI, r3
 800230e:	f3bf 8f6f 	isb	sy
 8002312:	f3bf 8f4f 	dsb	sy
 8002316:	607b      	str	r3, [r7, #4]
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	e7fd      	b.n	800231a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <vPortExitCritical+0x50>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	4a08      	ldr	r2, [pc, #32]	@ (8002348 <vPortExitCritical+0x50>)
 8002326:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002328:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <vPortExitCritical+0x50>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <vPortExitCritical+0x44>
 8002330:	2300      	movs	r3, #0
 8002332:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800233a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	20000008 	.word	0x20000008

0800234c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800234c:	f3ef 8009 	mrs	r0, PSP
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <PendSV_Handler+0x5c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f01e 0f10 	tst.w	lr, #16
 800235c:	bf08      	it	eq
 800235e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002362:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002366:	6010      	str	r0, [r2, #0]
 8002368:	e92d 0009 	stmdb	sp!, {r0, r3}
 800236c:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002370:	f380 8811 	msr	BASEPRI, r0
 8002374:	f3bf 8f4f 	dsb	sy
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f7fe fffa 	bl	8001374 <vTaskSwitchContext>
 8002380:	f04f 0000 	mov.w	r0, #0
 8002384:	f380 8811 	msr	BASEPRI, r0
 8002388:	bc09      	pop	{r0, r3}
 800238a:	6819      	ldr	r1, [r3, #0]
 800238c:	6808      	ldr	r0, [r1, #0]
 800238e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002392:	f01e 0f10 	tst.w	lr, #16
 8002396:	bf08      	it	eq
 8002398:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800239c:	f380 8809 	msr	PSP, r0
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	4770      	bx	lr
 80023a6:	0000      	.short	0x0000
 80023a8:	20000068 	.word	0x20000068
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80023ac:	bf00      	nop
 80023ae:	bf00      	nop

080023b0 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
    __asm volatile
 80023b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	607b      	str	r3, [r7, #4]
}
 80023c8:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80023ca:	f7fe feb9 	bl	8001140 <xTaskIncrementTick>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <SysTick_Handler+0x40>)
 80023d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	2300      	movs	r3, #0
 80023de:	603b      	str	r3, [r7, #0]
    __asm volatile
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f383 8811 	msr	BASEPRI, r3
}
 80023e6:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	e000ed04 	.word	0xe000ed04

080023f4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <vPortSetupTimerInterrupt+0x34>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <vPortSetupTimerInterrupt+0x38>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <vPortSetupTimerInterrupt+0x3c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <vPortSetupTimerInterrupt+0x40>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <vPortSetupTimerInterrupt+0x44>)
 8002412:	3b01      	subs	r3, #1
 8002414:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <vPortSetupTimerInterrupt+0x34>)
 8002418:	2207      	movs	r2, #7
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e010 	.word	0xe000e010
 800242c:	e000e018 	.word	0xe000e018
 8002430:	20000000 	.word	0x20000000
 8002434:	10624dd3 	.word	0x10624dd3
 8002438:	e000e014 	.word	0xe000e014

0800243c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800243c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800244c <vPortEnableVFP+0x10>
 8002440:	6801      	ldr	r1, [r0, #0]
 8002442:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8002446:	6001      	str	r1, [r0, #0]
 8002448:	4770      	bx	lr
 800244a:	0000      	.short	0x0000
 800244c:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop

08002454 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08e      	sub	sp, #56	@ 0x38
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800245c:	2300      	movs	r3, #0
 800245e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d022      	beq.n	80024b0 <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 800246a:	2308      	movs	r3, #8
 800246c:	43db      	mvns	r3, r3
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	429a      	cmp	r2, r3
 8002472:	d81b      	bhi.n	80024ac <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8002474:	2208      	movs	r2, #8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	2b00      	cmp	r3, #0
 8002484:	d014      	beq.n	80024b0 <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	f1c3 0308 	rsb	r3, r3, #8
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	43db      	mvns	r3, r3
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d804      	bhi.n	80024a6 <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a0:	4413      	add	r3, r2
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	e004      	b.n	80024b0 <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	e001      	b.n	80024b0 <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80024b0:	f7fe fd20 	bl	8000ef4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80024b4:	4b7c      	ldr	r3, [pc, #496]	@ (80026a8 <pvPortMalloc+0x254>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 80024bc:	f000 f97c 	bl	80027b8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f2c0 80d7 	blt.w	8002676 <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80d3 	beq.w	8002676 <pvPortMalloc+0x222>
 80024d0:	4b76      	ldr	r3, [pc, #472]	@ (80026ac <pvPortMalloc+0x258>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	f200 80cd 	bhi.w	8002676 <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80024dc:	4b74      	ldr	r3, [pc, #464]	@ (80026b0 <pvPortMalloc+0x25c>)
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80024e0:	4b73      	ldr	r3, [pc, #460]	@ (80026b0 <pvPortMalloc+0x25c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80024e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e8:	4a72      	ldr	r2, [pc, #456]	@ (80026b4 <pvPortMalloc+0x260>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d305      	bcc.n	80024fa <pvPortMalloc+0xa6>
 80024ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f0:	4a71      	ldr	r2, [pc, #452]	@ (80026b8 <pvPortMalloc+0x264>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d801      	bhi.n	80024fa <pvPortMalloc+0xa6>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <pvPortMalloc+0xa8>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d129      	bne.n	8002554 <pvPortMalloc+0x100>
    __asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	61fb      	str	r3, [r7, #28]
}
 8002512:	bf00      	nop
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8002518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251a:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 800251c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8002522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002524:	4a63      	ldr	r2, [pc, #396]	@ (80026b4 <pvPortMalloc+0x260>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d305      	bcc.n	8002536 <pvPortMalloc+0xe2>
 800252a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252c:	4a62      	ldr	r2, [pc, #392]	@ (80026b8 <pvPortMalloc+0x264>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d801      	bhi.n	8002536 <pvPortMalloc+0xe2>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <pvPortMalloc+0xe4>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <pvPortMalloc+0x100>
    __asm volatile
 800253c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002540:	f383 8811 	msr	BASEPRI, r3
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	61bb      	str	r3, [r7, #24]
}
 800254e:	bf00      	nop
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8002554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	d903      	bls.n	8002566 <pvPortMalloc+0x112>
 800255e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1d8      	bne.n	8002518 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002566:	4b50      	ldr	r3, [pc, #320]	@ (80026a8 <pvPortMalloc+0x254>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800256c:	429a      	cmp	r2, r3
 800256e:	f000 8082 	beq.w	8002676 <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8002572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2208      	movs	r2, #8
 8002578:	4413      	add	r3, r2
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800257e:	4a4d      	ldr	r2, [pc, #308]	@ (80026b4 <pvPortMalloc+0x260>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d305      	bcc.n	8002590 <pvPortMalloc+0x13c>
 8002584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002586:	4a4c      	ldr	r2, [pc, #304]	@ (80026b8 <pvPortMalloc+0x264>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d801      	bhi.n	8002590 <pvPortMalloc+0x13c>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <pvPortMalloc+0x13e>
 8002590:	2300      	movs	r3, #0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10b      	bne.n	80025ae <pvPortMalloc+0x15a>
    __asm volatile
 8002596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800259a:	f383 8811 	msr	BASEPRI, r3
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	617b      	str	r3, [r7, #20]
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	e7fd      	b.n	80025aa <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80025ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80025b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d90b      	bls.n	80025d8 <pvPortMalloc+0x184>
    __asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	613b      	str	r3, [r7, #16]
}
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	1ad2      	subs	r2, r2, r3
 80025e0:	2308      	movs	r3, #8
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d924      	bls.n	8002632 <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80025e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80025f0:	6a3b      	ldr	r3, [r7, #32]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <pvPortMalloc+0x1be>
    __asm volatile
 80025fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	60fb      	str	r3, [r7, #12]
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	e7fd      	b.n	800260e <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	1ad2      	subs	r2, r2, r3
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800261e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002632:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <pvPortMalloc+0x258>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	4a1b      	ldr	r2, [pc, #108]	@ (80026ac <pvPortMalloc+0x258>)
 800263e:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002640:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <pvPortMalloc+0x258>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b1d      	ldr	r3, [pc, #116]	@ (80026bc <pvPortMalloc+0x268>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d203      	bcs.n	8002654 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800264c:	4b17      	ldr	r3, [pc, #92]	@ (80026ac <pvPortMalloc+0x258>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a1a      	ldr	r2, [pc, #104]	@ (80026bc <pvPortMalloc+0x268>)
 8002652:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8002654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800265a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002664:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800266c:	4b14      	ldr	r3, [pc, #80]	@ (80026c0 <pvPortMalloc+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	4a13      	ldr	r2, [pc, #76]	@ (80026c0 <pvPortMalloc+0x26c>)
 8002674:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8002676:	f7fe fc4b 	bl	8000f10 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800267a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00b      	beq.n	800269c <pvPortMalloc+0x248>
    __asm volatile
 8002684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002688:	f383 8811 	msr	BASEPRI, r3
 800268c:	f3bf 8f6f 	isb	sy
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	60bb      	str	r3, [r7, #8]
}
 8002696:	bf00      	nop
 8002698:	bf00      	nop
 800269a:	e7fd      	b.n	8002698 <pvPortMalloc+0x244>
    return pvReturn;
 800269c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3738      	adds	r7, #56	@ 0x38
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20012db8 	.word	0x20012db8
 80026ac:	20012dbc 	.word	0x20012dbc
 80026b0:	20012db0 	.word	0x20012db0
 80026b4:	200001b0 	.word	0x200001b0
 80026b8:	20012daf 	.word	0x20012daf
 80026bc:	20012dc0 	.word	0x20012dc0
 80026c0:	20012dc4 	.word	0x20012dc4

080026c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d064      	beq.n	80027a0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80026d6:	2308      	movs	r3, #8
 80026d8:	425b      	negs	r3, r3
 80026da:	69fa      	ldr	r2, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	4a30      	ldr	r2, [pc, #192]	@ (80027a8 <vPortFree+0xe4>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d305      	bcc.n	80026f8 <vPortFree+0x34>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4a2f      	ldr	r2, [pc, #188]	@ (80027ac <vPortFree+0xe8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d801      	bhi.n	80026f8 <vPortFree+0x34>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <vPortFree+0x36>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <vPortFree+0x52>
    __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	617b      	str	r3, [r7, #20]
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	e7fd      	b.n	8002712 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	db0b      	blt.n	8002736 <vPortFree+0x72>
    __asm volatile
 800271e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	613b      	str	r3, [r7, #16]
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	e7fd      	b.n	8002732 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <vPortFree+0x92>
    __asm volatile
 800273e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	60fb      	str	r3, [r7, #12]
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	e7fd      	b.n	8002752 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	0fdb      	lsrs	r3, r3, #31
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01c      	beq.n	80027a0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d118      	bne.n	80027a0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800277a:	f7fe fbbb 	bl	8000ef4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4b0b      	ldr	r3, [pc, #44]	@ (80027b0 <vPortFree+0xec>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4413      	add	r3, r2
 8002788:	4a09      	ldr	r2, [pc, #36]	@ (80027b0 <vPortFree+0xec>)
 800278a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800278c:	69b8      	ldr	r0, [r7, #24]
 800278e:	f000 f86d 	bl	800286c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <vPortFree+0xf0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a06      	ldr	r2, [pc, #24]	@ (80027b4 <vPortFree+0xf0>)
 800279a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800279c:	f7fe fbb8 	bl	8000f10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80027a0:	bf00      	nop
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200001b0 	.word	0x200001b0
 80027ac:	20012daf 	.word	0x20012daf
 80027b0:	20012dbc 	.word	0x20012dbc
 80027b4:	20012dc8 	.word	0x20012dc8

080027b8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80027be:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80027c2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80027c4:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <prvHeapInit+0xa0>)
 80027c6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00c      	beq.n	80027ec <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3307      	adds	r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0307 	bic.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80027e0:	68ba      	ldr	r2, [r7, #8]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002858 <prvHeapInit+0xa0>)
 80027e8:	4413      	add	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <prvHeapInit+0xa4>)
 80027f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	@ (800285c <prvHeapInit+0xa4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	4413      	add	r3, r2
 80027fe:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002800:	2208      	movs	r2, #8
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f023 0307 	bic.w	r3, r3, #7
 800280e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a13      	ldr	r2, [pc, #76]	@ (8002860 <prvHeapInit+0xa8>)
 8002814:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002816:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <prvHeapInit+0xa8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2200      	movs	r2, #0
 800281c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <prvHeapInit+0xa8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	1ad2      	subs	r2, r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002834:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <prvHeapInit+0xa8>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <prvHeapInit+0xac>)
 8002842:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a07      	ldr	r2, [pc, #28]	@ (8002868 <prvHeapInit+0xb0>)
 800284a:	6013      	str	r3, [r2, #0]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	200001b0 	.word	0x200001b0
 800285c:	20012db0 	.word	0x20012db0
 8002860:	20012db8 	.word	0x20012db8
 8002864:	20012dc0 	.word	0x20012dc0
 8002868:	20012dbc 	.word	0x20012dbc

0800286c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002874:	4b36      	ldr	r3, [pc, #216]	@ (8002950 <prvInsertBlockIntoFreeList+0xe4>)
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e002      	b.n	8002880 <prvInsertBlockIntoFreeList+0x14>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	429a      	cmp	r2, r3
 8002888:	d8f7      	bhi.n	800287a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	4a30      	ldr	r2, [pc, #192]	@ (8002950 <prvInsertBlockIntoFreeList+0xe4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d018      	beq.n	80028c4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	4a2f      	ldr	r2, [pc, #188]	@ (8002954 <prvInsertBlockIntoFreeList+0xe8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d305      	bcc.n	80028a6 <prvInsertBlockIntoFreeList+0x3a>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	4a2e      	ldr	r2, [pc, #184]	@ (8002958 <prvInsertBlockIntoFreeList+0xec>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d801      	bhi.n	80028a6 <prvInsertBlockIntoFreeList+0x3a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <prvInsertBlockIntoFreeList+0x3c>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	60fb      	str	r3, [r7, #12]
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	e7fd      	b.n	80028c0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d108      	bne.n	80028e8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	441a      	add	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	441a      	add	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d118      	bne.n	800292e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b16      	ldr	r3, [pc, #88]	@ (800295c <prvInsertBlockIntoFreeList+0xf0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d00d      	beq.n	8002924 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	441a      	add	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e008      	b.n	8002936 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8002924:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <prvInsertBlockIntoFreeList+0xf0>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e003      	b.n	8002936 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	429a      	cmp	r2, r3
 800293c:	d002      	beq.n	8002944 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002944:	bf00      	nop
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20012db0 	.word	0x20012db0
 8002954:	200001b0 	.word	0x200001b0
 8002958:	20012daf 	.word	0x20012daf
 800295c:	20012db8 	.word	0x20012db8

08002960 <memset>:
 8002960:	4402      	add	r2, r0
 8002962:	4603      	mov	r3, r0
 8002964:	4293      	cmp	r3, r2
 8002966:	d100      	bne.n	800296a <memset+0xa>
 8002968:	4770      	bx	lr
 800296a:	f803 1b01 	strb.w	r1, [r3], #1
 800296e:	e7f9      	b.n	8002964 <memset+0x4>

08002970 <__libc_init_array>:
 8002970:	b570      	push	{r4, r5, r6, lr}
 8002972:	4d0d      	ldr	r5, [pc, #52]	@ (80029a8 <__libc_init_array+0x38>)
 8002974:	4c0d      	ldr	r4, [pc, #52]	@ (80029ac <__libc_init_array+0x3c>)
 8002976:	1b64      	subs	r4, r4, r5
 8002978:	10a4      	asrs	r4, r4, #2
 800297a:	2600      	movs	r6, #0
 800297c:	42a6      	cmp	r6, r4
 800297e:	d109      	bne.n	8002994 <__libc_init_array+0x24>
 8002980:	4d0b      	ldr	r5, [pc, #44]	@ (80029b0 <__libc_init_array+0x40>)
 8002982:	4c0c      	ldr	r4, [pc, #48]	@ (80029b4 <__libc_init_array+0x44>)
 8002984:	f000 f826 	bl	80029d4 <_init>
 8002988:	1b64      	subs	r4, r4, r5
 800298a:	10a4      	asrs	r4, r4, #2
 800298c:	2600      	movs	r6, #0
 800298e:	42a6      	cmp	r6, r4
 8002990:	d105      	bne.n	800299e <__libc_init_array+0x2e>
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	f855 3b04 	ldr.w	r3, [r5], #4
 8002998:	4798      	blx	r3
 800299a:	3601      	adds	r6, #1
 800299c:	e7ee      	b.n	800297c <__libc_init_array+0xc>
 800299e:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a2:	4798      	blx	r3
 80029a4:	3601      	adds	r6, #1
 80029a6:	e7f2      	b.n	800298e <__libc_init_array+0x1e>
 80029a8:	08002a10 	.word	0x08002a10
 80029ac:	08002a10 	.word	0x08002a10
 80029b0:	08002a10 	.word	0x08002a10
 80029b4:	08002a14 	.word	0x08002a14

080029b8 <memcpy>:
 80029b8:	440a      	add	r2, r1
 80029ba:	4291      	cmp	r1, r2
 80029bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80029c0:	d100      	bne.n	80029c4 <memcpy+0xc>
 80029c2:	4770      	bx	lr
 80029c4:	b510      	push	{r4, lr}
 80029c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80029ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029ce:	4291      	cmp	r1, r2
 80029d0:	d1f9      	bne.n	80029c6 <memcpy+0xe>
 80029d2:	bd10      	pop	{r4, pc}

080029d4 <_init>:
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	bf00      	nop
 80029d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029da:	bc08      	pop	{r3}
 80029dc:	469e      	mov	lr, r3
 80029de:	4770      	bx	lr

080029e0 <_fini>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr
